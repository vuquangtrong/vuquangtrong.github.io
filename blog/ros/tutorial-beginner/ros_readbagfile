#!/usr/bin/python

"""
This file is a modified version of the orginal script at https://raw.githubusercontent.com/ElectricRCAircraftGuy/eRCaGuy_dotfiles/master/useful_scripts/ros_readbagfile.py

this modified script is available at: https://github.com/vuquangtrong/ros_readbagfile

Install dependencies:
    sudo apt install python-rosbag   # for python2 (deprecated)
    sudo apt install python3-rosbag  # for python3 (recommended)

Edit the shebang to #!/usr/bin/python3 when using Python3

"""

import rosbag

import os
import sys
import textwrap

# `topics=None` means to read ALL topics; see:
# https://docs.ros.org/api/rosbag/html/python/rosbag.bag.Bag-class.html#read_messages
READ_ALL_TOPICS = None
READ_ALL_MESSAGES = None

def printHelp():
    cmd_name = os.path.basename(sys.argv[0])
    help = textwrap.dedent("""
        Usage: {0} <mybagfile.bag> [info] [max messages] [topic1] [topic2] [topic3] [...topicN]

        Reads and prints all messages published on the specified topics from the specified ROS bag file. If
        no topics are specified, it will print ALL messages published on ALL topics found in the bag file.
        For large bag files, on the order of 10 to 20 GB or so, expect the script to take on the order of
        1 to 4 minutes or so assuming you have a fast Solid-State Drive (SSD).

        TODO: converting this script from Python to C++ could potentially speed this up by an estimated
        factor of 13x or so, decreasing the processing time from a couple minutes to perhaps a dozen
        seconds.

        Examples:
        1. See the information of the input bag file:
            {0} mybagfile.bag info
        
        2. Print all messages of all topics in the bag file to the screen:
            {0} mybagfile.bag
        
        3. Print all messages of the topic /test in the bag file to the screen:
            {0} mybagfile.bag /test
        
        4. Print at most N first messages of all topics in the bag file to the screen:
            {0} mybagfile.bag N
        
        5. Print at most N first messages of the topic /test in the bag file to the screen:
            {0} mybagfile.bag N /test
        
        6. To save the output to a file, use redirection syntax:
            {0} mybagfile.bag N /test > output.txt
        
        """).format(cmd_name)

    print(help)


class Args:
    """
    Argument variables for the `main()` func
    """
    bag_file_in = ""
    topics_to_read = READ_ALL_TOPICS
    max_messages = READ_ALL_MESSAGES

def printArgs(args):
    print("args.bag_file_in = {}".format(args.bag_file_in))
    print("args.topics_to_read = {}".format(args.topics_to_read))
    print("args.max_messages = {}".format(args.max_messages))

def parseArgs():
    print("# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    args = Args()

    if len(sys.argv) == 1:
        print("# ERROR: no input args; 1 minimum required.")
        printHelp()
        sys.exit()

    if len(sys.argv) >= 2:
        if sys.argv[1] == "-h" or sys.argv[1] == "--help":
            printHelp()
            sys.exit()

        args.bag_file_in = sys.argv[1]

    if len(sys.argv) >= 3:
        args.topics_to_read = sys.argv[2:]
    
    if args.topics_to_read:
        if args.topics_to_read[0] == "info":
            os.system("rosbag info {}".format(args.bag_file_in))
            sys.exit()
        elif args.topics_to_read[0].startswith('/'):
            args.max_messages = None
        else:
            try:
                args.max_messages = int(args.topics_to_read[0])
            except:
                printHelp()
                sys.exit()
            args.topics_to_read = args.topics_to_read[1:]
    
    print("# Scanning ROS bag file \"{}\"".format(args.bag_file_in))
    print("# for the following topics:")
    
    if not args.topics_to_read:
        # list is empty
        print("#    ALL TOPICS in the bag file")
    else:
        for topic in args.topics_to_read:
            print("#    {}".format(topic))
    
    if not args.max_messages:
        print("#    ALL Messages in each topic")
    else:
        print("#    at most {} messages in each topic".format(args.max_messages))
        
    print("# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")

    return args


def printMsgsInBagFile(args):
    no_msgs_found = True
    # Establish counters to keep track of the message number being received under each topic name
    msg_counters = {} # empty dict
    total_msg_counters = {} # empty dict
    total_count = 0
    bag_in = rosbag.Bag(args.bag_file_in)
    for topic, msg, t in bag_in.read_messages(args.topics_to_read):
        total_count += 1
        no_msgs_found = False
        
        # Keep track of individual message counters for each message type        
        if topic not in total_msg_counters:
            total_msg_counters[topic] = 0;
        
        total_msg_counters[topic] += 1;
                
        if topic not in msg_counters:
            msg_counters[topic] = 0;

        if args.max_messages and msg_counters[topic] >= args.max_messages:
            continue
        
        msg_counters[topic] += 1;
        print("\n# =======================================")
        
        # Print topic name and message receipt info
        print("# topic:           " + topic)
        print("# msg_count:       %u" % msg_counters[topic])
        # the comma at the end prevents the newline char being printed at the end in Python2; see:
        # https://www.geeksforgeeks.org/print-without-newline-python/
        print("# timestamp (sec): {:.9f}".format(t.to_sec())),
        print("# - - -")

        # Print the message
        print(msg)

    print("")
    print("# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")

    print("# Total messages found: {:>23}".format(total_count))
    print("# Read messages:")
    for topic in msg_counters:
        print("#    {:<30} {:>5}/{:>5}".format(topic + ":", msg_counters[topic], total_msg_counters[topic]))
    if no_msgs_found:
        print("# NO MESSAGES FOUND IN THESE TOPICS")
    print("#")
    print("# DONE.")
    print("# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")


# If this file is called directly, as opposed to imported, run this:
if __name__ == '__main__':
    args = parseArgs()
    # printArgs(args) # for debugging
    printMsgsInBagFile(args)
